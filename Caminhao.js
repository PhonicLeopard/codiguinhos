// js/Caminhao.js
import Carro from './Carro.js';

/**
 * @class Caminhao
 * @extends Carro
 * @classdesc Representa um caminh√£o, uma especializa√ß√£o de `Carro`.
 *              Possui propriedades adicionais para gerenciar carga (`capacidadeCarga`, `cargaAtual`).
 *              Acelera√ß√£o e frenagem s√£o modificadas para serem influenciadas pelo peso da carga atual.
 *              Possui m√©todos espec√≠ficos para `carregar` e `descarregar` peso.
 *              Normalmente tem uma `maxVelocidade` menor que a de um carro.
 */
export default class Caminhao extends Carro {
    /**
     * @property {number} capacidadeCarga A capacidade m√°xima de carga, em quilogramas (kg),
     *                              que este caminh√£o pode transportar. Definido no construtor.
     */
    capacidadeCarga;
    /**
     * @property {number} cargaAtual O peso atual da carga, em quilogramas (kg),
     *                         que o caminh√£o est√° transportando no momento.
     *                         N√£o pode exceder `capacidadeCarga`. Inicializa em 0.
     */
    cargaAtual;

    /**
     * Cria uma inst√¢ncia de Caminhao.
     * Chama o construtor da classe pai (`Carro`), define uma `maxVelocidade` padr√£o mais baixa,
     * e inicializa as propriedades `capacidadeCarga` (validando para ser n√£o negativa) e `cargaAtual`.
     *
     * @param {string} modelo O modelo espec√≠fico do caminh√£o (ex: "Scania R450", "Mercedes Actros").
     * @param {string} cor A cor do caminh√£o.
     * @param {number} [capacidadeCarga=5000] A capacidade m√°xima de carga em kg. Padr√£o 5000. Ser√° ajustado para 0 se um valor negativo for fornecido.
     * @param {string} [imagem='placeholder.png'] URL opcional da imagem do caminh√£o.
     */
    constructor(modelo, cor, capacidadeCarga = 5000, imagem = 'placeholder.png') {
        super(modelo, cor, imagem);
        this.capacidadeCarga = Math.max(0, Number(capacidadeCarga) || 0); // Garante n√£o negativo
        this.cargaAtual = 0;
        this.maxVelocidade = 120; // Velocidade padr√£o mais baixa
    }

    /**
     * Tenta aumentar a velocidade do caminh√£o, considerando a influ√™ncia da carga.
     * A for√ßa de acelera√ß√£o (incremento efetivo) √© reduzida √† medida que a carga aumenta.
     * Um fator de carga √© calculado (variando de ~0.3 a 1.0) e multiplica o incremento base.
     * Usa um incremento base padr√£o menor que o do carro.
     *
     * @override Sobrescreve `Carro.acelerar` com l√≥gica de fator de carga e valor padr√£o diferente.
     * @description Atualiza `velocidade` considerando a carga. Feedback externo.
     * @param {number} [incremento=8] O valor base (em km/h) a ser adicionado √† velocidade. Padr√£o 8.
     * @returns {boolean} Retorna `true` se a velocidade foi aumentada, `false` se impedido.
     */
    acelerar(inc = 8) {
        const n = Number(inc);
        if (isNaN(n) || n <= 0) {
            console.warn(`Caminhao ${this.modelo}: Incremento inv√°lido ${inc}`);
            return false;
        }
        if (!this.ligado) {
             console.warn(`Caminhao ${this.modelo}: Tentativa de acelerar desligado.`);
            // showNotification(`Ligue ${this.modelo} p/ acelerar.`, "warning"); // REMOVIDO
            // playSound(soundMap.error); // REMOVIDO
            return false;
        }
        if (this.velocidade >= this.maxVelocidade) {
            console.info(`Caminhao ${this.modelo}: Velocidade m√°xima (${this.maxVelocidade}) atingida.`);
            // showNotification(`Velocidade m√°x (${this.maxVelocidade}) atingida.`, "info"); // REMOVIDO
            return false;
        }
        // Calcula fator de carga
        const f = this.capacidadeCarga > 0 ? Math.max(0.3, 1 - this.cargaAtual / (this.capacidadeCarga * 1.5)) : 1;
        this.velocidade = Math.min(this.velocidade + n * f, this.maxVelocidade);
        console.log(`Caminhao ${this.modelo} (Carga: ${this.cargaAtual}kg) acelerou para ${this.velocidade.toFixed(0)} km/h (Fator: ${f.toFixed(2)}).`);
        return true;
    }

    /**
     * Tenta diminuir a velocidade do caminh√£o, considerando a influ√™ncia da carga.
     * A for√ßa de frenagem (decremento efetivo) √© reduzida √† medida que a carga aumenta (simulando maior in√©rcia).
     * Um fator de carga √© calculado (variando de ~0.4 a 1.0) e multiplica o decremento base.
     * Usa um decremento base padr√£o menor.
     *
     * @override Sobrescreve `Carro.frear` com l√≥gica de fator de carga e valor padr√£o diferente.
     * @description Atualiza `velocidade` considerando a carga. Feedback externo.
     * @param {number} [decremento=8] O valor base (em km/h) a ser subtra√≠do da velocidade. Padr√£o 8.
     * @returns {boolean} Retorna `true` se a velocidade foi diminu√≠da, `false` caso contr√°rio.
     */
    frear(dec = 8) {
        const n = Number(dec);
        if (isNaN(n) || n <= 0) {
             console.warn(`Caminhao ${this.modelo}: Decremento inv√°lido ${dec}`);
             return false;
        }
        // N√£o precisa de feedback se j√° parado, apenas retorna false.
        if (this.velocidade === 0) {
             console.info(`Caminhao ${this.modelo}: J√° est√° parado.`);
             return false;
        }
        // Calcula fator de carga para frenagem
        const f = this.capacidadeCarga > 0 ? Math.max(0.4, 1 - this.cargaAtual / (this.capacidadeCarga * 2)) : 1;
        this.velocidade = Math.max(0, this.velocidade - n * f);
        console.log(`Caminhao ${this.modelo} (Carga: ${this.cargaAtual}kg) freou para ${this.velocidade.toFixed(0)} km/h (Fator: ${f.toFixed(2)}).`);
        return true;
    }

    /**
     * Tenta adicionar uma quantidade de peso √† carga atual do caminh√£o.
     * Realiza valida√ß√µes para garantir que o peso √© positivo, que o caminh√£o
     * tem capacidade de carga, e que a nova carga n√£o exceder√° a capacidade m√°xima.
     *
     * @description Atualiza `cargaAtual`. Feedback e persist√™ncia externos.
     * @param {number} peso O peso (em kg) a ser adicionado √† carga. Deve ser um n√∫mero positivo.
     * @returns {boolean} Retorna `true` se a carga foi adicionada com sucesso.
     *                    Retorna `false` se o peso for inv√°lido, se o caminh√£o n√£o tiver capacidade,
     *                    ou se adicionar o peso exceder a `capacidadeCarga`.
     */
    carregar(peso) {
        const p = Number(peso);
        if (isNaN(p) || p <= 0) {
            console.warn(`Caminhao ${this.modelo}: Peso inv√°lido para carregar: ${peso}`);
            // showNotification("Peso inv√°lido (> 0).", "warning"); // REMOVIDO
            // playSound(soundMap.error); // REMOVIDO
            return false;
        }
        if (this.capacidadeCarga <= 0) {
            console.warn(`Caminhao ${this.modelo}: N√£o pode carregar (capacidade <= 0).`);
            // showNotification(`${this.modelo} n√£o pode carregar.`, "warning"); // REMOVIDO
            // playSound(soundMap.error); // REMOVIDO
            return false;
        }
        if (this.cargaAtual + p > this.capacidadeCarga) {
            const disp = this.capacidadeCarga - this.cargaAtual;
            console.warn(`Caminhao ${this.modelo}: Carga excedida ao tentar carregar ${p}kg. Dispon√≠vel: ${disp}kg.`);
            // showNotification(`Carga excedida! M√°x: ${this.capacidadeCarga}kg. Disp: ${disp}kg.`, "warning"); // REMOVIDO
            // playSound(soundMap.error); // REMOVIDO
            return false;
        }
        this.cargaAtual += p;
        console.log(`üì¶ Caminhao ${this.modelo}: Carregou +${p}kg. Total: ${this.cargaAtual}kg / ${this.capacidadeCarga}kg.`);
        // showNotification(`üì¶ +${p}kg carregados. Total: ${this.cargaAtual}kg.`, "success", 3000); // REMOVIDO
        return true;
    }

    /**
     * Tenta remover uma quantidade de peso da carga atual do caminh√£o.
     * Realiza valida√ß√µes para garantir que o peso √© positivo e que
     * h√° carga suficiente para remover a quantidade solicitada.
     *
     * @description Atualiza `cargaAtual`. Feedback e persist√™ncia externos.
     * @param {number} peso O peso (em kg) a ser removido da carga. Deve ser um n√∫mero positivo.
     * @returns {boolean} Retorna `true` se a carga foi removida com sucesso.
     *                    Retorna `false` se o peso for inv√°lido ou se tentar remover mais peso do que a `cargaAtual`.
     */
    descarregar(peso) {
        const p = Number(peso);
        if (isNaN(p) || p <= 0) {
            console.warn(`Caminhao ${this.modelo}: Peso inv√°lido para descarregar: ${peso}`);
            // showNotification("Peso inv√°lido (> 0).", "warning"); // REMOVIDO
            // playSound(soundMap.error); // REMOVIDO
            return false;
        }
        if (p > this.cargaAtual) {
            console.warn(`Caminhao ${this.modelo}: Tentativa de descarregar ${p}kg, mas s√≥ tem ${this.cargaAtual}kg.`);
            // showNotification(`Carga insuficiente (${this.cargaAtual}kg).`, "warning"); // REMOVIDO
            // playSound(soundMap.error); // REMOVIDO
            return false;
        }
        this.cargaAtual -= p;
        console.log(`üì¶ Caminhao ${this.modelo}: Descarregou -${p}kg. Restante: ${this.cargaAtual}kg / ${this.capacidadeCarga}kg.`);
        // showNotification(`üì¶ -${p}kg descarregados. Restante: ${this.cargaAtual}kg.`, "success", 3000); // REMOVIDO
        return true;
    }

    /**
     * Atualiza as propriedades do caminh√£o, incluindo a capacidade de carga.
     * Se a capacidade for alterada, ajusta a carga atual para n√£o exced√™-la.
     * Delega a atualiza√ß√£o das propriedades base (modelo, cor, imagem) para `super.updateProperties`.
     *
     * @override Sobrescreve `Veiculo.updateProperties` para adicionar o par√¢metro `novaCapacidade`.
     * @description Modifica o estado. Feedback e persist√™ncia externos.
     * @param {string|null} nM O novo modelo.
     * @param {string|null} nC A nova cor.
     * @param {string|null} nI A nova URL da imagem.
     * @param {number|null} [nCap=null] A nova capacidade de carga em kg. Se `null` ou inv√°lido, mant√©m a capacidade atual.
     * @returns {boolean} Retorna `true` se alguma propriedade (incluindo capacidade) foi alterada, `false` caso contr√°rio.
     */
    updateProperties(nM, nC, nI, nCap = null) {
        const baseAlterada = super.updateProperties(nM, nC, nI); // Atualiza modelo, cor, imagem
        let capacidadeAlterada = false;

        // Verifica e atualiza a capacidade de carga se um valor v√°lido foi fornecido
        if (nCap !== null && !isNaN(Number(nCap))) {
            const numC = Math.max(0, Number(nCap)); // Garante n√£o negativo
            if (this.capacidadeCarga !== numC) {
                 console.log(`Caminhao ${this.modelo}: Capacidade alterada de ${this.capacidadeCarga}kg para ${numC}kg.`);
                this.capacidadeCarga = numC;
                // Ajusta carga atual se exceder a nova capacidade
                if (this.cargaAtual > this.capacidadeCarga) {
                    console.warn(`Caminhao ${this.modelo}: Carga atual (${this.cargaAtual}kg) ajustada para nova capacidade (${this.capacidadeCarga}kg).`);
                    this.cargaAtual = this.capacidadeCarga;
                }
                capacidadeAlterada = true;
            }
        }

        // O som de salvar s√≥ toca se algo realmente mudou (base OU capacidade)
        // if (baseAlterada || capacidadeAlterada) {
        //     playSound(soundMap.save); // Movido para 'interagir'
        // }
        return baseAlterada || capacidadeAlterada; // Informa se houve qualquer altera√ß√£o
    }

    /**
     * Gera uma representa√ß√£o HTML das informa√ß√µes do caminh√£o.
     * Inclui todos os detalhes de `Carro` (via `super.getDisplayInfo()`) e adiciona
     * linhas mostrando a Capacidade de Carga total e a Carga Atual, incluindo
     * o percentual de ocupa√ß√£o da capacidade.
     *
     * @override Sobrescreve `Carro.getDisplayInfo` para adicionar informa√ß√µes de carga.
     * @returns {string} Uma string HTML formatada com os detalhes completos do caminh√£o.
     */
    getDisplayInfo() {
        let bI = super.getDisplayInfo(); // Pega HTML de Carro (ID, Modelo, Cor, Status, KM, Velocidade)
        const cP = this.capacidadeCarga > 0 ? ((this.cargaAtual / this.capacidadeCarga) * 100).toFixed(1) : 0; // Calcula %
        // Adiciona informa√ß√µes de carga
        bI += `<div class="info-item"><strong>Capacidade:</strong> ${this.capacidadeCarga.toLocaleString("pt-BR")} kg</div>`;
        bI += `<div class="info-item"><strong>Carga Atual:</strong> ${this.cargaAtual.toLocaleString("pt-BR")} kg (${cP}%)</div>`;
        return bI;
    }
}