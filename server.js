// server.js

require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');

const Veiculo = require('./VeiculoModel.js');
const Manutencao = require('./ManutencaoModel.js');

const app = express();
const PORT = process.env.PORT || 3001;

// --- Middlewares ---
app.use(express.json());
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*'); // Para simplificar, permite qualquer origem
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
    next();
});

// --- Conex√£o com o Banco de Dados ---
async function connectToDatabase() {
    try {
        await mongoose.connect(process.env.MONGO_URI_CRUD);
        console.log("‚úÖ Conectado ao MongoDB com sucesso!");
    } catch (error) {
        console.error("‚ùå FALHA FATAL ao conectar ao MongoDB:", error);
        process.exit(1);
    }
}

// =========================================================================
//                     ROTAS PRINCIPAIS - VE√çCULOS (CRUD)
// =========================================================================

// GET: Buscar todos os ve√≠culos (COM MANUTEN√á√ïES POPULADAS)
app.get('/api/veiculos', async (req, res) => {
    try {
        // A m√°gica acontece aqui: .populate() busca os detalhes de cada manuten√ß√£o
        // que est√° referenciada no array 'historicoManutencoes' de cada ve√≠culo.
        const veiculos = await Veiculo.find().sort({ createdAt: -1 }).populate('historicoManutencoes');
        res.status(200).json(veiculos);
    } catch (error) {
        res.status(500).json({ message: "Erro ao buscar ve√≠culos.", error: error.message });
    }
});

// POST: Criar um novo ve√≠culo
app.post('/api/veiculos', async (req, res) => {
    try {
        const novoVeiculo = new Veiculo(req.body);
        const veiculoSalvo = await novoVeiculo.save();
        res.status(201).json(veiculoSalvo);
    } catch (error) {
        res.status(400).json({ message: "Erro ao criar ve√≠culo.", error: error.message });
    }
});

// PUT: Atualizar um ve√≠culo por ID
app.put('/api/veiculos/:id', async (req, res) => {
    try {
        const veiculoAtualizado = await Veiculo.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
        if (!veiculoAtualizado) return res.status(404).json({ message: "Ve√≠culo n√£o encontrado." });
        res.status(200).json(veiculoAtualizado);
    } catch (error) {
        res.status(400).json({ message: "Erro ao atualizar ve√≠culo.", error: error.message });
    }
});

// DELETE: Excluir um ve√≠culo por ID
app.delete('/api/veiculos/:id', async (req, res) => {
    try {
        const veiculoDeletado = await Veiculo.findByIdAndDelete(req.params.id);
        if (!veiculoDeletado) return res.status(404).json({ message: "Ve√≠culo n√£o encontrado." });

        // Opcional: Deletar todas as manuten√ß√µes associadas a este ve√≠culo para n√£o deixar lixo no DB
        await Manutencao.deleteMany({ veiculo: req.params.id });

        res.status(204).send(); // Sucesso, sem conte√∫do para retornar
    } catch (error) {
        res.status(500).json({ message: "Erro ao deletar ve√≠culo.", error: error.message });
    }
});


// =========================================================================
//                  ROTAS DE SUB-RECURSO - MANUTEN√á√ïES
// =========================================================================

// ROTA: Criar uma nova manuten√ß√£o para UM ve√≠culo espec√≠fico
app.post('/api/veiculos/:veiculoId/manutencoes', async (req, res) => {
    try {
        const { veiculoId } = req.params;

        // 1. Valida√ß√£o: Verifica se o ve√≠culo com o ID fornecido existe.
        const veiculo = await Veiculo.findById(veiculoId);
        if (!veiculo) {
            return res.status(404).json({ message: "Ve√≠culo n√£o encontrado. Imposs√≠vel registrar manuten√ß√£o." });
        }

        // 2. Cria√ß√£o: Cria a nova manuten√ß√£o, associando-a ao ve√≠culo.
        const novaManutencao = new Manutencao({ 
            ...req.body,      // Pega dados como { tipo, custo, data } do corpo da requisi√ß√£o
            veiculo: veiculoId // Adiciona a refer√™ncia obrigat√≥ria ao ID do ve√≠culo.
        });
        await novaManutencao.save();

        // 3. V√≠nculo: Adiciona a refer√™ncia da nova manuten√ß√£o ao array do ve√≠culo.
        veiculo.historicoManutencoes.push(novaManutencao._id);
        await veiculo.save();

        res.status(201).json(novaManutencao);
    } catch (error) {
        res.status(400).json({ message: "Erro ao criar manuten√ß√£o.", error: error.message });
    }
});


// --- Inicializa√ß√£o do Servidor ---
async function startServer() {
    await connectToDatabase();
    app.listen(PORT, () => console.log(`üöÄ Servidor backend rodando na porta ${PORT}`));
}

// Adicione este c√≥digo dentro do seu arquivo server.js

/**
 * ROTA: POST /api/veiculos/:veiculoId/manutencoes
 * OBJETIVO: Criar um novo registro de manuten√ß√£o e associ√°-lo a um ve√≠culo existente.
 */
app.post('/api/veiculos/:veiculoId/manutencoes', async (req, res) => {
    // Envolve toda a l√≥gica em um bloco try...catch para tratamento de erros
    try {
        // 1. Extrai o veiculoId dos par√¢metros da rota (ex: da URL /api/veiculos/123/manutencoes)
        const { veiculoId } = req.params;

        // 2. Valida se o ve√≠culo com o ID fornecido realmente existe no banco de dados.
        //    Isso previne a cria√ß√£o de manuten√ß√µes "√≥rf√£s".
        const veiculo = await Veiculo.findById(veiculoId);
        if (!veiculo) {
            // Se o findById retorna null, o ve√≠culo n√£o foi encontrado.
            return res.status(404).json({ message: "Ve√≠culo n√£o encontrado. Imposs√≠vel registrar manuten√ß√£o." });
        }

        // 3. Cria uma nova inst√¢ncia do modelo 'Manutencao'.
        //    - Usa o spread operator (...) para pegar todos os dados do corpo da requisi√ß√£o (tipo, custo, etc.)
        //    - Adiciona a refer√™ncia obrigat√≥ria ao ID do ve√≠culo.
        const novaManutencao = new Manutencao({ 
            ...req.body, 
            veiculo: veiculoId 
        });
        
        // 4. Salva a nova manuten√ß√£o no banco de dados. Se houver erro de valida√ß√£o (ex: custo negativo),
        //    o Mongoose lan√ßar√° um erro que ser√° capturado pelo bloco catch.
        await novaManutencao.save();

        // PASSO EXTRA ESSENCIAL: Atualiza o documento do ve√≠culo para incluir a refer√™ncia a esta nova manuten√ß√£o.
        // Isso √© o que permite que o .populate() funcione corretamente na rota GET /api/veiculos.
        veiculo.historicoManutencoes.push(novaManutencao._id);
        await veiculo.save();

        // 5. Se tudo correu bem, responde com o status 201 (Created) e o documento da manuten√ß√£o rec√©m-criada.
        res.status(201).json(novaManutencao);

    } catch (error) {
        // 6. Lida com os erros que podem ter ocorrido.
        if (error.name === 'ValidationError') {
            // Se o erro foi lan√ßado pelo Mongoose por falha na valida√ß√£o dos dados (ex: campo obrigat√≥rio faltando)
            res.status(400).json({ message: "Erro de valida√ß√£o nos dados da manuten√ß√£o.", error: error.message });
        } else {
            // Para todos os outros tipos de erro (ex: falha de conex√£o com o DB)
            console.error('‚ùå Erro ao criar manuten√ß√£o:', error); // Loga o erro no console do servidor para depura√ß√£o
            res.status(500).json({ message: "Erro interno no servidor ao tentar criar manuten√ß√£o.", error: error.message });
        }
    }
});

app.get('/api/veiculos/:veiculoId/manutencoes', async (req, res) => {
    // Envolve a l√≥gica em um bloco try...catch para tratamento de erros.
    try {
        // 1. Extrai o veiculoId dos par√¢metros da rota.
        const { veiculoId } = req.params;

        // 2. (Opcional, mas recomendado) Valida se o ve√≠culo pai existe.
        //    Isso fornece uma mensagem de erro mais clara ("Ve√≠culo n√£o encontrado")
        //    em vez de apenas retornar uma lista vazia.
        const veiculo = await Veiculo.findById(veiculoId);
        if (!veiculo) {
            return res.status(404).json({ message: "Ve√≠culo n√£o encontrado." });
        }

        // 3. Usa o modelo Manutencao para encontrar todos os documentos
        //    cujo campo 'veiculo' corresponde ao veiculoId da rota.
        // 4. Ordena (sort) os resultados pela data em ordem decrescente (-1),
        //    colocando os servi√ßos mais recentes no topo da lista.
        const manuten√ß√µes = await Manutencao.find({ veiculo: veiculoId }).sort({ data: -1 });

        // 5. Retorna a lista de manuten√ß√µes encontradas (pode ser uma lista vazia)
        //    com o status 200 (OK).
        res.status(200).json(manuten√ß√µes);

    } catch (error) {
        // 6. Lida com erros internos do servidor.
        console.error('‚ùå Erro ao buscar manuten√ß√µes:', error);
        res.status(500).json({ message: "Erro interno do servidor ao buscar manuten√ß√µes.", error: error.message });
    }
});

startServer();